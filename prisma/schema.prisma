// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")

  users           User[]
  endpoints       RoleEndpoint[]
  roleGrantings   RoleGrant[]         @relation("role_granting")
  roleGranteds    RoleGrant[]         @relation("role_granted")
  functionalities RoleFunctionality[]

  @@map("role")
}

model User {
  id        Int       @id @default(autoincrement())
  roleId    Int       @map("role_id")
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  advisorUnities          UnityAdvisor[]
  associateAdvisorUnities UnityAssociateAdvisor[]

  role Role @relation(fields: [roleId], references: [id])

  @@map("user")
}

model Endpoint {
  id          Int       @id @default(autoincrement())
  url         String
  method      String
  description String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")

  roles RoleEndpoint[]

  @@unique([url, method])
  @@map("endpoint")
}

model RoleEndpoint {
  roleId     Int       @map("role_id")
  endpointId Int       @map("endpoint_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")

  role     Role     @relation(fields: [roleId], references: [id])
  endpoint Endpoint @relation(fields: [endpointId], references: [id])

  @@id([roleId, endpointId])
  @@map("role_endpoint")
}

model RoleGrant {
  roleGrantingId Int @map("role_granting_id")
  roleGrantedId  Int @map("role_granted_id")

  roleGranting Role @relation(fields: [roleGrantingId], references: [id], name: "role_granting")
  roleGranted  Role @relation(fields: [roleGrantedId], references: [id], name: "role_granted")

  @@id([roleGrantingId, roleGrantedId])
  @@map("role_grant")
}

model Unity {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  advisors          UnityAdvisor[]
  associateAdvisors UnityAssociateAdvisor[]

  @@map("unity")
}

model UnityAdvisor {
  unityId   Int       @map("unity_id")
  advisorId Int       @map("advisor_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  unity   Unity @relation(fields: [unityId], references: [id])
  advisor User  @relation(fields: [advisorId], references: [id])

  @@id([unityId, advisorId])
  @@map("unity_advisor")
}

model UnityAssociateAdvisor {
  unityId            Int       @map("unity_id")
  associateAdvisorId Int       @map("associate_advisor_id")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @map("updated_at")

  unity            Unity @relation(fields: [unityId], references: [id])
  associateAdvisor User  @relation(fields: [associateAdvisorId], references: [id])

  @@id([unityId, associateAdvisorId])
  @@map("unity_associate_advisor")
}

model Functionality {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  url         String              @unique
  description String
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime?           @map("updated_at")
  roles       RoleFunctionality[]

  @@map("functionality")
}

model RoleFunctionality {
  roleId          Int       @map("role_id")
  functionalityId Int       @map("functionality_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @map("updated_at")

  role          Role          @relation(fields: [roleId], references: [id])
  functionality Functionality @relation(fields: [functionalityId], references: [id])

  @@id([roleId, functionalityId])
  @@map("role_functionality")
}
